@{
    ViewBag.Title = "TCharts Prototype";
}
@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>Graphical Practice</h1>
                <h2>@ViewBag.Message</h2>
            </hgroup>
        </div>
    </section>
}
<style>
    svg {
        border: solid 1px lightgray;
        /*margin: 10px;*/
    }
    /*Override site style*/
    g.label {
        font-weight: normal;
    }   
</style>
<h2>TCharts Prototype</h2>
<p>
    Run the JavaScript <a href="/tests.html" target="_blank">test suite</a>.
</p>
<div>
    <h3>Fuel Economy (Quartile plot)</h3>
    <div id="fuel_quartile"></div>
    <br clear="all" />

    <h3>Blood Tests (Sparkline)</h3>
    <div id="sparkline"></div>
    <p>TODO: plot most recent glucose reading with color matching dot; take color off labels?</p>


    <br clear="all" />
</div>
@section scripts {
    <script type="text/javascript" src="Scripts/TCharts.js"></script>
    <script type="text/javascript">
        d3.csv("../mtcars.csv.txt", function (data) {
            var mpg = data.map(function (x) { return parseFloat(x.mpg); });
            var mpg2 = data.map(function (x) { return parseFloat(x.mpg) * (0.4 + Math.random()); });
            var mpg3 = data.map(function (x) { return parseFloat(x.mpg) * (1 + Math.random()); });
            var chartData = [mpg, mpg2, mpg3];
            var labels = ["Subaru", "Toyota Motor Company", "Honda"];

            //Create a quartile plot
            var c = (new QuartilePlot({
                containerSelector: "#fuel_quartile",
                autoHeight: true,
                width: 500,
                /*margin: {
                    top: 10,
                    right: 10,
                    bottom: 10,
                    left: 10
                },*/
                datum: {
                    stroke: "steelblue",
                    fill: "steelblue"
                },
                xAxis: {
                    grid: {
                        stroke: '#E2E2E2'
                    }
                }
            })).data(chartData).labels(labels).render();



            var fakeLabels = ["Glucose", "Sodium", "Potassium"];
            var fakeValues = [3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 3, 6, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9, 3, 6, 2, 7, 5, 2, 1, 3, 8, 9, 2, 5, 9];
            var sparklineData = [
                fakeValues,
                fakeValues.map(function (d,i) { return d * (0.4 + Math.random()); }),
                fakeValues.map(function (d,i) { return d * (1.4 + Math.random()); })
            ];
            
            //test for uneven array lengths...
            sparklineData[2].pop();
            sparklineData[2].pop();
            sparklineData[2].pop();
            sparklineData[2].pop();
            sparklineData[2].pop();

            //Create a sparkline
            var s = (new Sparkline({
                autoHeight: true,
                margin: { 
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                },
                containerSelector: "#sparkline",                
                datum: {
                    radius: 2,
                    stroke: "steelblue",
                    fill: "#E1B770"
                },
                yAxis: {
                    labelMargin: 10,                    
                }
            })).data(sparklineData).labels(fakeLabels).render();
        });
    </script>
}
